import PptxGenJS from 'pptxgenjs';

interface Slide {
  title: string;
  content: string[];
}

interface SlideStyle {
  backgroundColor: string;
  titleColor: string;
  contentColor: string;
  titleFontSize: number;
  contentFontSize: number;
  titleFontFamily: string;
  contentFontFamily: string;
  accentColor: string;
}

export async function generatePpt(
  slides: Slide[], 
  filename: string = 'presentation',
  slideStyles?: SlideStyle[]
) {
  const pptx = new PptxGenJS();
  
  // Set presentation metadata
  pptx.author = 'AI Slides Generator';
  pptx.company = 'Generated by AI';
  pptx.title = filename;

  // Define title slide master with modern design
  pptx.defineSlideMaster({
    title: 'TITLE_SLIDE',
    background: { fill: '4472C4' }, // Blue background
    objects: [
      { rect: { x: 0, y: 0, w: '100%', h: '100%', fill: { color: '4472C4' } } },
    ],
  });

  // Define content slide master with professional styling
  pptx.defineSlideMaster({
    title: 'CONTENT_SLIDE',
    background: { fill: 'FFFFFF' },
    objects: [
      { rect: { x: 0, y: 0, w: 0.25, h: '100%', fill: { color: '4472C4' } } },
      { line: { x: 0, y: 0.5, w: '100%', h: 0, line: { color: '4472C4', width: 2 } } }
    ],
  });

  // Create title slide
  if (slides.length > 0) {
    const titleStyle = slideStyles?.[0];
    const titleSlide = pptx.addSlide({ masterName: 'TITLE_SLIDE' });
    
    // Override background if custom style provided
    if (titleStyle?.backgroundColor) {
      titleSlide.background = { fill: titleStyle.backgroundColor.replace('#', '') };
    }
    
    // Main title
    titleSlide.addText(slides[0].title, {
      x: 1,
      y: 2,
      w: '80%',
      h: 1.5,
      fontSize: titleStyle?.titleFontSize || 48,
      bold: true,
      color: titleStyle?.titleColor?.replace('#', '') || 'FFFFFF',
      fontFace: titleStyle?.titleFontFamily || 'Arial',
      align: 'left',
    });

    // Subtitle
    if (slides[0].content.length > 0) {
      titleSlide.addText(slides[0].content[0], {
        x: 1,
        y: 3.5,
        w: '80%',
        h: 0.5,
        fontSize: titleStyle?.contentFontSize || 28,
        color: titleStyle?.contentColor?.replace('#', '') || 'FFFFFF',
        fontFace: titleStyle?.contentFontFamily || 'Arial',
        align: 'left',
      });
    }

    // Add decorative elements
    titleSlide.addShape(pptx.ShapeType.rect, {
      x: 1,
      y: 5.5,
      w: '80%',
      h: 0.1,
      fill: { color: titleStyle?.accentColor?.replace('#', '') || 'FFFFFF' },
    });
  }

  // Add content slides
  slides.slice(1).forEach((slideData, index) => {
    const slideIndex = index + 1; // +1 because we're starting from slice(1)
    const slideStyle = slideStyles?.[slideIndex];
    const slide = pptx.addSlide({ masterName: 'CONTENT_SLIDE' });
    
    // Override background and accent colors if custom style provided
    if (slideStyle?.backgroundColor) {
      slide.background = { fill: slideStyle.backgroundColor.replace('#', '') };
    }
    
    // Add custom accent bar if different color
    if (slideStyle?.accentColor) {
      slide.addShape(pptx.ShapeType.rect, {
        x: 0,
        y: 0,
        w: 0.25,
        h: '100%',
        fill: { color: slideStyle.accentColor.replace('#', '') },
      });
      
      // Add custom accent line
      slide.addShape(pptx.ShapeType.rect, {
        x: 0,
        y: 0.5,
        w: '100%',
        h: 0.02,
        fill: { color: slideStyle.accentColor.replace('#', '') },
      });
    }
    
    // Slide title
    slide.addText(slideData.title, {
      x: 0.5,
      y: 0.3,
      w: 8.5,
      h: 0.6,
      fontSize: slideStyle?.titleFontSize || 32,
      bold: true,
      color: slideStyle?.titleColor?.replace('#', '') || '4472C4',
      fontFace: slideStyle?.titleFontFamily || 'Arial',
    });

    // Bullet points with proper spacing
    slide.addText(slideData.content.join('\n'), {
      x: 0.5,
      y: 1.2,
      w: 8.5,
      h: 4.5,
      fontSize: slideStyle?.contentFontSize || 18,
      color: slideStyle?.contentColor?.replace('#', '') || '363636',
      fontFace: slideStyle?.contentFontFamily || 'Arial',
      bullet: true,
      lineSpacing: 28,
    });
  });

  // Generate as blob for browser use
  return await pptx.write({ outputType: 'blob' });
}
